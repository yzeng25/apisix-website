"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[27214],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(n),m=i,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(h,o(o({ref:t},l),{},{components:n})):r.createElement(h,o({ref:t},l))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},41162:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));const a={title:"Service"},o=void 0,c={unversionedId:"architecture-design/service",id:"version-2.13/architecture-design/service",isDocsHomePage:!1,title:"Service",description:"A Service is an abstraction of an API (which can also be understood as a set of Route abstractions). It usually corresponds to an upstream service abstraction.",source:"@site/docs-apisix_versioned_docs/version-2.13/architecture-design/service.md",sourceDirName:"architecture-design",slug:"/architecture-design/service",permalink:"/docs/apisix/2.13/architecture-design/service",editUrl:"/edit#https://github.com/apache/apisix/edit/release/2.13/docs/en/latest/architecture-design/service.md",tags:[],version:"2.13",frontMatter:{title:"Service"},sidebar:"version-2.13/docs",previous:{title:"Script",permalink:"/docs/apisix/2.13/architecture-design/script"},next:{title:"Consumer",permalink:"/docs/apisix/2.13/architecture-design/consumer"}},s=[],u={toc:s};function l(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A Service is an abstraction of an API (which can also be understood as a set of ",(0,i.kt)("a",{parentName:"p",href:"/docs/apisix/2.13/architecture-design/route"},"Route")," abstractions). It usually corresponds to an upstream service abstraction."),(0,i.kt)("p",null,"The relationship between Routes and a Service is usually N:1 as shown in the image below."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/apache/apisix/release/2.13/docs/assets/images/service-example.png",alt:"service-example"})),(0,i.kt)("p",null,"As shown, different Routes could be bound to the same Service. This reduces redundancy as these bounded Routes will have the same ",(0,i.kt)("a",{parentName:"p",href:"/docs/apisix/2.13/architecture-design/upstream"},"Upstream")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/apisix/2.13/architecture-design/plugin"},"Plugin")," configurations."),(0,i.kt)("p",null,"The following example creates a Service that enables the current-limit Plugin, and then binds it to the Routes with the ids ",(0,i.kt)("inlineCode",{parentName:"p"},"100")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"101"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'# create new Service\n$ curl http://127.0.0.1:9080/apisix/admin/services/200 -H \'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1\' -X PUT -d \'\n{\n    "plugins": {\n        "limit-count": {\n            "count": 2,\n            "time_window": 60,\n            "rejected_code": 503,\n            "key": "remote_addr"\n        }\n    },\n    "upstream": {\n        "type": "roundrobin",\n        "nodes": {\n            "127.0.0.1:1980": 1\n        }\n    }\n}\'\n\n# create new Route and reference the service by id `200`\ncurl http://127.0.0.1:9080/apisix/admin/routes/100 -H \'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1\' -X PUT -d \'\n{\n    "methods": ["GET"],\n    "uri": "/index.html",\n    "service_id": "200"\n}\'\n\ncurl http://127.0.0.1:9080/apisix/admin/routes/101 -H \'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1\' -X PUT -d \'\n{\n    "methods": ["GET"],\n    "uri": "/foo/index.html",\n    "service_id": "200"\n}\'\n')),(0,i.kt)("p",null,"We can also specify different Plugins or Upstream for the Routes than the ones defined in the Service. The example below creates a Route with a limit-count Plugin. This Route will continue to use the other configurations defined in the Service (here, the Upstream configuration)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'curl http://127.0.0.1:9080/apisix/admin/routes/102 -H \'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1\' -X PUT -d \'\n{\n    "uri": "/bar/index.html",\n    "id": "102",\n    "service_id": "200",\n    "plugins": {\n        "limit-count": {\n            "count": 2000,\n            "time_window": 60,\n            "rejected_code": 503,\n            "key": "remote_addr"\n        }\n    }\n}\'\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": When a Route and a Service enable the same Plugin, the one defined in the Route is given the higher priority."))}l.isMDXComponent=!0}}]);