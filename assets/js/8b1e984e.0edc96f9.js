"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[49768],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),u=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),s=u(n),m=r,g=s["".concat(d,".").concat(m)]||s[m]||p[m]||l;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=s;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},59485:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const l={title:"Debug Mode"},i=void 0,o={unversionedId:"architecture-design/debug-mode",id:"version-2.13/architecture-design/debug-mode",isDocsHomePage:!1,title:"Debug Mode",description:"You can enable the basic debug mode by adding this line to your conf/debug.yaml file.",source:"@site/docs-apisix_versioned_docs/version-2.13/architecture-design/debug-mode.md",sourceDirName:"architecture-design",slug:"/architecture-design/debug-mode",permalink:"/docs/apisix/2.13/architecture-design/debug-mode",editUrl:"/edit#https://github.com/apache/apisix/edit/release/2.13/docs/en/latest/architecture-design/debug-mode.md",tags:[],version:"2.13",frontMatter:{title:"Debug Mode"},sidebar:"version-2.13/docs",previous:{title:"Router",permalink:"/docs/apisix/2.13/architecture-design/router"},next:{title:"Getting Started",permalink:"/docs/apisix/2.13/getting-started"}},d=[{value:"Basic Debug Mode",id:"basic-debug-mode",children:[]},{value:"Advanced Debug Mode",id:"advanced-debug-mode",children:[]},{value:"Enable Advanced Debug Mode Dynamically",id:"enable-advanced-debug-mode-dynamically",children:[]}],u={toc:d};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"basic-debug-mode"},"Basic Debug Mode"),(0,r.kt)("p",null,"You can enable the basic debug mode by adding this line to your ",(0,r.kt)("inlineCode",{parentName:"p"},"conf/debug.yaml")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"basic:\n  enable: true\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": Before Apache APISIX 2.10, basic debug mode was enabled by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"apisix.enable_debug = true")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"conf/config.yaml")," file."),(0,r.kt)("p",null,"For example, if we are using two plugins ",(0,r.kt)("inlineCode",{parentName:"p"},"limit-conn")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"limit-count")," for a Route ",(0,r.kt)("inlineCode",{parentName:"p"},"/hello"),", we will receive a response with the header ",(0,r.kt)("inlineCode",{parentName:"p"},"Apisix-Plugins: limit-conn, limit-count")," when we enable the basic debug mode."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ curl http://127.0.0.1:1984/hello -i\nHTTP/1.1 200 OK\nContent-Type: text/plain\nTransfer-Encoding: chunked\nConnection: keep-alive\nApisix-Plugins: limit-conn, limit-count\nX-RateLimit-Limit: 2\nX-RateLimit-Remaining: 1\nServer: openresty\n\nhello world\n")),(0,r.kt)("p",null,"If the debug information cannot be included in a response header (say when the plugin is in a stream subsystem), the information will be logged in the error log at a ",(0,r.kt)("inlineCode",{parentName:"p"},"warn")," level."),(0,r.kt)("h3",{id:"advanced-debug-mode"},"Advanced Debug Mode"),(0,r.kt)("p",null,"Advanced debug mode can also be enabled by modifying the configuration in the ",(0,r.kt)("inlineCode",{parentName:"p"},"conf/debug.yaml")," file."),(0,r.kt)("p",null,"Enable advanced debug mode by modifying the configuration in ",(0,r.kt)("inlineCode",{parentName:"p"},"conf/debug.yaml")," file."),(0,r.kt)("p",null,"The checker checks every second for changes to the configuration files. An ",(0,r.kt)("inlineCode",{parentName:"p"},"#END")," flag is added to let the checker know that it should only look for changes till that point."),(0,r.kt)("p",null,"The checker would only check this if the file was updated by checking its last modification time."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hook_conf.enable"),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"Enable/Disable hook debug trace. Target module function's input arguments or returned value would be printed once this option is enabled."),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hook_conf.name"),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"The module list name of the hook which has enabled debug trace."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hook_conf.log_level"),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"Logging levels for input arguments & returned values."),(0,r.kt)("td",{parentName:"tr",align:null},"warn")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hook_conf.is_print_input_args"),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"Enable/Disable printing input arguments."),(0,r.kt)("td",{parentName:"tr",align:null},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hook_conf.is_print_return_value"),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"Enable/Disable printing returned values."),(0,r.kt)("td",{parentName:"tr",align:null},"true")))),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"hook_conf:\n  enable: false # Enable/Disable Hook Debug Trace\n  name: hook_phase # The Module List Name of Hook which has enabled Debug Trace\n  log_level: warn # Logging Levels\n  is_print_input_args: true # Enable/Disable Input Arguments Print\n  is_print_return_value: true # Enable/Disable Returned Value Print\n\nhook_phase: # Module Function List, Name: hook_phase\n  apisix: # Referenced Module Name\n    - http_access_phase # Function Names\uff1aArray\n    - http_header_filter_phase\n    - http_body_filter_phase\n    - http_log_phase\n#END\n")),(0,r.kt)("h3",{id:"enable-advanced-debug-mode-dynamically"},"Enable Advanced Debug Mode Dynamically"),(0,r.kt)("p",null,"You can also enable the advanced debug mode to take effect on particular requests."),(0,r.kt)("p",null,"For example, to dynamically enable advanced debugging mode on requests with a particular header name ",(0,r.kt)("inlineCode",{parentName:"p"},"X-APISIX-Dynamic-Debug")," you can configure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"http_filter:\n  enable: true # Enable/Disable Advanced Debug Mode Dynamically\n  enable_header_name: X-APISIX-Dynamic-Debug # Trace for the request with this header\n......\n#END\n")),(0,r.kt)("p",null,"This will enable the advanced debug mode for requests like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl 127.0.0.1:9090/hello --header 'X-APISIX-Dynamic-Debug: foo'\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": The ",(0,r.kt)("inlineCode",{parentName:"p"},"apisix.http_access_phase")," module cannot be hooked for dynamic rules as the advanced debug mode is enabled based on the request."))}c.isMDXComponent=!0}}]);