"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[44760],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),g=l(r),d=i,h=g["".concat(s,".").concat(d)]||g[d]||p[d]||a;return r?n.createElement(h,o(o({ref:t},u),{},{components:r})):n.createElement(h,o({ref:t},u))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=g;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},72104:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var n=r(87462),i=(r(67294),r(3905));const a={title:"APISIX"},o=void 0,c={unversionedId:"architecture-design/apisix",id:"version-2.15/architecture-design/apisix",isDocsHomePage:!1,title:"APISIX",description:"flow-software-architecture",source:"@site/docs-apisix_versioned_docs/version-2.15/architecture-design/apisix.md",sourceDirName:"architecture-design",slug:"/architecture-design/apisix",permalink:"/docs/apisix/2.15/architecture-design/apisix",editUrl:"/edit#https://github.com/apache/apisix/edit/release/2.15/docs/en/latest/architecture-design/apisix.md",tags:[],version:"2.15",frontMatter:{title:"APISIX"},sidebar:"version-2.15/docs",next:{title:"Plugin Config",permalink:"/docs/apisix/2.15/architecture-design/plugin-config"}},s=[{value:"Apache APISIX : Software Architecture",id:"apache-apisix--software-architecture",children:[]},{value:"Plugin Loading Process",id:"plugin-loading-process",children:[]},{value:"Plugin Hierarchy Structure",id:"plugin-hierarchy-structure",children:[]}],l={toc:s};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"apache-apisix--software-architecture"},"Apache APISIX : Software Architecture"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/apache/apisix/release/2.15/docs/assets/images/flow-software-architecture.png",alt:"flow-software-architecture"})),(0,i.kt)("p",null,"Apache APISIX is a dynamic, real-time, high-performance cloud-native API gateway. It is built on top of NGINX + ngx_lua technology and leverages the power offered by LuaJIT. ",(0,i.kt)("a",{parentName:"p",href:"https://apisix.apache.org/blog/2021/08/25/why-apache-apisix-chose-nginx-and-lua/"},"Why Apache APISIX chose Nginx and Lua to build API Gateway?")),(0,i.kt)("p",null,"APISIX is divided into two main parts:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"APISIX core, including Lua plugin, multi-language plugin runtime, Wasm plugin runtime, etc."),(0,i.kt)("li",{parentName:"ol"},"Feature-rich variety of built-in plugins: including observability, security, traffic control, etc.")),(0,i.kt)("p",null,"In the APISIX core, important functions such as route matching, load balancing, service discovery, management API, and basic modules such as configuration management are provided. In addition, APISIX plugin runtime is also included, providing the runtime framework for native Lua plugins and multilingual plugins, as well as the experimental Wasm plugin runtime, etc. APISIX multilingual plugin runtime provides support for various development languages, such as Golang, Java, Python, JS, etc."),(0,i.kt)("p",null,"APISIX currently has various plugins built in, covering various areas of API gateways, such as authentication and authentication, security, observability, traffic management, multi-protocol access, and so on. The plugins currently built into APISIX are implemented using native Lua. For the introduction and usage of each plugin, please check the ",(0,i.kt)("a",{parentName:"p",href:"https://apisix.apache.org/docs/apisix/plugins/batch-requests"},"documentation")," of the relevant plugin."),(0,i.kt)("h2",{id:"plugin-loading-process"},"Plugin Loading Process"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/apache/apisix/release/2.15/docs/assets/images/flow-load-plugin.png",alt:"flow-load-plugin"})),(0,i.kt)("h2",{id:"plugin-hierarchy-structure"},"Plugin Hierarchy Structure"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/apache/apisix/release/2.15/docs/assets/images/flow-plugin-internal.png",alt:"flow-plugin-internal"})))}u.isMDXComponent=!0}}]);